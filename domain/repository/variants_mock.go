// Code generated by MockGen. DO NOT EDIT.
// Source: domain/repository/variants.go

// Package repository is a generated GoMock package.
package repository

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/kakiyuta/golang-clean-architecture/app/domain/model"
)

// MockVariants is a mock of Variants interface.
type MockVariants struct {
	ctrl     *gomock.Controller
	recorder *MockVariantsMockRecorder
}

// MockVariantsMockRecorder is the mock recorder for MockVariants.
type MockVariantsMockRecorder struct {
	mock *MockVariants
}

// NewMockVariants creates a new mock instance.
func NewMockVariants(ctrl *gomock.Controller) *MockVariants {
	mock := &MockVariants{ctrl: ctrl}
	mock.recorder = &MockVariantsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVariants) EXPECT() *MockVariantsMockRecorder {
	return m.recorder
}

// GetVariants mocks base method.
func (m *MockVariants) GetVariants(productID int) ([]model.Variant, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVariants", productID)
	ret0, _ := ret[0].([]model.Variant)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVariants indicates an expected call of GetVariants.
func (mr *MockVariantsMockRecorder) GetVariants(productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVariants", reflect.TypeOf((*MockVariants)(nil).GetVariants), productID)
}
